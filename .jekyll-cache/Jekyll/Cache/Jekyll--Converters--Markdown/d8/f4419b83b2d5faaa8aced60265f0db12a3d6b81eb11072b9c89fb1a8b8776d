I"F><div class="alert alert-danger" role="alert"><i class="fa fa-exclamation-circle"></i> <b>Warning:</b> Esto <b>NO</b> es una guía de aprendizaje. Esto es una guía rapida para refrescar conocimientos. Si quieres aprender python te dejo unos enlaces en la sección <b>Aprender python</b>.
 </div>

<h2 id="1-declarar-y-llamar-a-la-función">1. Declarar y llamar a la función</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">myFuncion</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Esto es una función"</span><span class="p">)</span>
<span class="n">myFuncion</span><span class="p">()</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python pruebas.py<br />
Esto es una función<br /></div>
<p><br /></p>

<h2 id="2-retorno-de-valores">2. Retorno de valores</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">myFuncion</span><span class="p">():</span>
    <span class="n">suma</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span>
    <span class="k">return</span> <span class="n">suma</span>
<span class="k">print</span><span class="p">(</span><span class="n">myFuncion</span><span class="p">())</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python retorno.py<br />
5<br /></div>
<p><br /></p>

<h2 id="3-retorno-de-múltiples-valores">3. Retorno de múltiples valores</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">myFuncion</span><span class="p">():</span>
    <span class="n">suma</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span>
    <span class="n">resta</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="n">nombre</span> <span class="o">=</span> <span class="s">'Pepe'</span>
    <span class="k">return</span> <span class="n">suma</span><span class="p">,</span> <span class="n">resta</span><span class="p">,</span> <span class="n">nombre</span>
<span class="k">print</span><span class="p">(</span><span class="n">myFuncion</span><span class="p">())</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python retorno_multiple.py<br />
(5, 3, 'Pepe')<br /></div>
<p><br /></p>

<h2 id="4-envio-de-valores">4. Envio de valores</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">myFuncion</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">):</span>
    <span class="n">suma</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span>
    <span class="k">return</span> <span class="n">suma</span>
<span class="k">print</span><span class="p">(</span><span class="n">myFuncion</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python envio_valores.py<br />
10<br /></div>
<p><br /></p>

<h2 id="5-enviar-los-argumentos-por-nombre">5. Enviar los argumentos por nombre</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">myFuncion</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">):</span>
    <span class="n">suma</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span>
    <span class="k">return</span> <span class="n">suma</span>
<span class="k">print</span><span class="p">(</span><span class="n">myFuncion</span><span class="p">(</span><span class="n">n2</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">n1</span><span class="o">=</span><span class="mi">8</span><span class="p">))</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python envio_valores.py<br />
10<br /></div>
<p><br /></p>

<h2 id="6-valores-por-defecto-de-los-argumentos">6. Valores por defecto de los argumentos</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">myFuncion</span><span class="p">(</span><span class="n">n1</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">n2</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">n1</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">n2</span><span class="p">)</span>
<span class="n">myFuncion</span><span class="p">()</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python envio_valores.py<br />
None<br />
None<br /></div>
<p><br /></p>

<h2 id="6-argumentos-indeterminados">6. Argumentos indeterminados</h2>
<div class="bs-callout bs-callout-primary">Los parámetros indeterminados por posición y por nombre sirven cuando no sabemos el número de parámetros que le pasaremos a la función.</div>

<h3 id="por-posición">Por posición</h3>
<div class="bs-callout bs-callout-primary">Para recibir un número indeterminado de parámetros por posición, debemos crear una lista dinámica de elementos definiendo el parámetro con un asterisco.</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">miFuncion</span><span class="p">(</span><span class="o">*</span><span class="n">argumentos</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">argumentos</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
<span class="n">miFuncion</span><span class="p">(</span><span class="s">'hola'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="p">[</span><span class="s">'adios'</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python por_posicion.py<br />
hola<br />
3<br />
25<br />
['adios', 8]<br /></div>
<p><br /></p>

<h3 id="por-nombre">Por nombre</h3>
<div class="bs-callout bs-callout-primary">Para recibir un número indeterminado de parámetros por nombre (clave-valor), debemos crear un diccionario de argumentos definiendo el parámetro con dos asteriscos</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">miFuncion</span><span class="p">(</span><span class="o">**</span><span class="n">argumentos</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">argumentos</span><span class="p">)</span>
<span class="n">miFuncion</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="s">'hola'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">23</span><span class="p">)</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python por_nombre.py<br />
{'a': 1, 'b': 'hola', 'c': 23}<br /></div>
<p><br /></p>

<h3 id="por-posición-y-por-nombre">Por posición y por nombre</h3>
<div class="bs-callout bs-callout-primary">Si queremos aceptar ambos tipos de parámetros simultáneamente, entonces debemos crear ambas colecciones dinámicas. Primero los argumentos indeterminados por valor y luego los que son por clave y valor.</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">miFuncion</span><span class="p">(</span><span class="o">*</span><span class="n">posicion</span><span class="p">,</span> <span class="o">**</span><span class="n">nombre</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Por posicion:'</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">arg_p</span> <span class="ow">in</span> <span class="n">posicion</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">arg_p</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'Por nombre:'</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">arg_n</span> <span class="ow">in</span> <span class="n">nombre</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">arg_n</span><span class="p">,</span><span class="s">'='</span> <span class="p">,</span><span class="n">nombre</span><span class="p">[</span><span class="n">arg_n</span><span class="p">])</span>

<span class="n">miFuncion</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">nombre</span><span class="o">=</span><span class="s">'Pepe'</span><span class="p">,</span> <span class="n">Edad</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python por_posicion.py<br />
Por posicion:<br />
1<br />
2<br />
3<br />
Por nombre:<br />
nombre = Pepe<br />
Edad = 25<br /></div>
<p><br /></p>

<h2 id="7-funciones-recursivas">7. Funciones recursivas</h2>
<div class="bs-callout bs-callout-primary">Son funciones que se llaman a si mismas durante su propia ejecución.</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">cuentaAtras</span><span class="p">(</span><span class="n">numero</span><span class="p">):</span>
    <span class="n">numero</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">numero</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span> <span class="p">(</span><span class="n">numero</span><span class="p">)</span>
        <span class="n">cuentaAtras</span><span class="p">(</span><span class="n">numero</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Fin de la cuenta atras"</span><span class="p">)</span>

<span class="n">cuentaAtras</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>
<!--TERMINAL-->
<link href="css/miEstilo.css" rel="stylesheet" type="text/css" />

<div id="barra"><img src="images/terminal/botones.png" id="botones" /><center id="texto_barra">meizoso.github.io</center></div>
<div id="terminal">
&gt;$ python f_recursivas.py<br />
4<br />
3<br />
2<br />
1<br />
Fin de la cuenta atras<br /></div>
<p><br /></p>

<h2 id="8-funciones-integradas">8. Funciones integradas</h2>
<div class="bs-callout bs-callout-primary">El interprete Python tiene un número de funciones integradas (built-in) dentro del módulo <strong>builtins</strong></div>

<h3 id="lista-de-funciones-integradas">Lista de funciones integradas</h3>

<table>
  <thead>
    <tr>
      <th>Funciones Built-in</th>
      <th> </th>
      <th> </th>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>abs()</td>
      <td>delattr()</td>
      <td>hash()</td>
      <td>memoryview()</td>
      <td>set()</td>
    </tr>
    <tr>
      <td>all()</td>
      <td>dict()</td>
      <td>help()</td>
      <td>min()</td>
      <td>setattr()</td>
    </tr>
    <tr>
      <td>any()</td>
      <td>dir()</td>
      <td>hex()</td>
      <td>next()</td>
      <td>slice()</td>
    </tr>
    <tr>
      <td>ascii()</td>
      <td>divmod()</td>
      <td>id()</td>
      <td>object()</td>
      <td>sorted()</td>
    </tr>
    <tr>
      <td>bin()</td>
      <td>enumerate()</td>
      <td>input()</td>
      <td>oct()</td>
      <td>staticmethod()</td>
    </tr>
    <tr>
      <td>bool()</td>
      <td>eval()</td>
      <td>int()</td>
      <td>open()</td>
      <td>str()</td>
    </tr>
    <tr>
      <td>breakpoint()</td>
      <td>exec()</td>
      <td>isinstance()</td>
      <td>ord()</td>
      <td>sum()</td>
    </tr>
    <tr>
      <td>bytearray()</td>
      <td>filter()</td>
      <td>issubclass()</td>
      <td>pow()</td>
      <td>super()</td>
    </tr>
    <tr>
      <td>bytes()</td>
      <td>float()</td>
      <td>iter()</td>
      <td>print()</td>
      <td>tuple()</td>
    </tr>
    <tr>
      <td>callable()</td>
      <td>format()</td>
      <td>len()</td>
      <td>property()</td>
      <td>type()</td>
    </tr>
    <tr>
      <td>chr()</td>
      <td>frozenset()</td>
      <td>list()</td>
      <td>range()</td>
      <td>vars()</td>
    </tr>
    <tr>
      <td>classmethod()</td>
      <td>getattr()</td>
      <td>locals()</td>
      <td>repr()</td>
      <td>zip()</td>
    </tr>
    <tr>
      <td>compile()</td>
      <td>globals()</td>
      <td>map()</td>
      <td>reversed()</td>
      <td>__import__()</td>
    </tr>
    <tr>
      <td>complex()</td>
      <td>hasattr()</td>
      <td>max()</td>
      <td>round()</td>
      <td> </td>
    </tr>
  </tbody>
</table>
:ET